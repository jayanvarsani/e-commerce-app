{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport { auth, createUserProfileDocument, getCurrentUser, googleProvider } from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess, signOutSuccess } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWIthEmail);\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWIthEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(userAuth);\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOut() {\n  try {\n    yield auth.signOut();\n    put(signOutSuccess());\n  } catch (error) {\n    put(signOutFailure());\n  }\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOut)]);\n}","map":{"version":3,"sources":["/Users/jayan/Desktop/Udemy React/e-commerce-app/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","createUserProfileDocument","getCurrentUser","googleProvider","signInFailure","signInSuccess","signOutSuccess","UserActionTypes","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWIthEmail","user","signInWithPopup","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","console","log","onCheckUserSession","CHECK_USER_SESSION","onSignOut","signOut","signOutFailure","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport {\n\tauth,\n\tcreateUserProfileDocument,\n\tgetCurrentUser,\n\tgoogleProvider,\n} from \"../../firebase/firebase.utils\";\nimport { signInFailure, signInSuccess, signOutSuccess } from \"./user.actions\";\nimport UserActionTypes from \"./user.types\";\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n\ttry {\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth);\n\t\tconst userSnapshot = yield userRef.get();\n\t\tyield put(\n\t\t\tsignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() })\n\t\t);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* onGoogleSignInStart() {\n\tyield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onEmailSignInStart() {\n\tyield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWIthEmail);\n}\n\nexport function* signInWithGoogle() {\n\ttry {\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider);\n\t\tyield getSnapshotFromUserAuth(user);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* signInWIthEmail({ payload: { email, password } }) {\n\ttry {\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password);\n\t\tyield getSnapshotFromUserAuth(user);\n\t} catch (error) {\n\t\tyield put(signInFailure(error));\n\t}\n}\n\nexport function* isUserAuthenticated() {\n\ttry {\n\t\tconst userAuth = yield getCurrentUser();\n\t\tconsole.log(userAuth);\n\t\tif (!userAuth) return;\n\t\tyield getSnapshotFromUserAuth(userAuth);\n\t} catch (error) {\n\t\tput(signInFailure(error));\n\t}\n}\n\nexport function* onCheckUserSession() {\n\tyield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* onSignOut() {\n\ttry {\n\t\tyield auth.signOut();\n\t\tput(signOutSuccess());\n\t} catch (error) {\n\t\tput(signOutFailure());\n\t}\n}\n\nexport function* userSagas() {\n\tyield all([\n\t\tcall(onGoogleSignInStart),\n\t\tcall(onEmailSignInStart),\n\t\tcall(onCheckUserSession),\n\t\tcall(onSignOut),\n\t]);\n}\n"]},"metadata":{},"sourceType":"module"}